#import "PAT.Lib.Example";

//A single lift system with NoOfFloors floors;
#define NoOfFloors 2;
#define NoOfLifts 2;
#define NoOfUsers 2;

//this array models the external requests; 
//extrequests[i] = 1 denotes there is an upward request at i-floor; 2 for downward; 3 for both direction; 0 for no request;
var extrequestsUP[NoOfFloors]; 
var extrequestsDOWN[NoOfFloors]; 
//this array models the internal requests; 
//intrequests[i][j] = 1 if there is a request for i-floor for lift-j; 0 for no request;
var intrequests[NoOfLifts][NoOfFloors]; 

//the level of the lift door opens at. -1 mean the door is closed.
var door = [-1(NoOfLifts)]; //initiate an array of -1 with length NoOfLifts

//a lift system consists of multiple users and lifts running in parallel
LiftSystem() = (||| {NoOfUsers} @ User())
				|||	
			   (||| x:{0..NoOfLifts-1} @ Lift(x, 0, 1)); 

//the following models the behaviors of the users;
User() = []pos:{0..NoOfFloors-1}@ (ExternalPush(pos); UserWaiting(pos));

//the following models the behaviors of the user pushing external buttons;
ExternalPush(pos) = ifa(pos!=0){pushdown.pos{extrequestsDOWN[pos] = 1;} -> Skip}else{pushup.pos{extrequestsUP[pos] = 1;} -> Skip}
                    []
                    ifa(pos != NoOfFloors -1){pushup.pos{extrequestsUP[pos] = 1;} -> Skip }else{pushdown.pos{extrequestsDOWN[pos] = 1;} -> Skip};

//the following models the behaviors of the user waiting and entering the lift;
UserWaiting(pos) = [] i:{0..NoOfLifts-1} @ 
			([door[i] == pos]enter.i -> ([]y:{0..NoOfFloors-1}@(push.y{intrequests[i][y] = 1;} -> 
			([door[i] == y]exit.i -> User()))));

//the following models the behaviors of the lift; Initially, the lift is at 0-th floor ready to go upwards.
Lift(i, level, direction) = 
		//if there are requests for the current floor, open the door. 
		ifa (intrequests[i][level] != 0 || (direction == 1 && extrequestsUP[level] == 1) || (direction == -1 && extrequestsDOWN[level] == 1)) {
			opendoor.i.level{door[i] = level; intrequests[i][level] = 0;
				if (direction > 0) {
					extrequestsUP[level] =0;
				} else {
					extrequestsDOWN[level] = 0;
				}
			} -> close.i.level{door[i] = -1;} -> Lift(i, level, direction)
		}
		else {
			//to check whether there are request on the travelling direction.
			checkIfToMove.i.level ->
			ifa (call(CheckIfToMove, level, direction, i, NoOfFloors, intrequests, extrequestsUP, extrequestsDOWN)) {
				moving.i.level.direction -> 
				ifa (level+direction == 0 || level+direction == NoOfFloors-1) {
					Lift(i, level+direction, -1*direction)
				}
				else {
					Lift(i, level+direction, direction)
				}
			}
			else {
				ifa ((level == 0 && direction == 1) || (level == NoOfFloors-1 && direction == -1)) {
					Lift(i, level, direction)
				}
				else {
					changedir.i.level -> Lift(i, level, -1*direction)
				}
			}
		};

#assert LiftSystem() deadlockfree;

//if there is an external request at first floor, it will eventually be served. 
#define on extrequestsUP[0] == 1;
#define off extrequestsUP[0] == 0;
#define on2 intrequests[0][1] == 1;
#assert LiftSystem() |= []<> off; 
#assert LiftSystem() |= [](on -> <>off) && [](on2 -> <>moving.1.0.1); 
