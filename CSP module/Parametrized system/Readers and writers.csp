//The classic Readers/Writers Example model multiple processes accessing a shared file.

////////////////The Model//////////////////
//the maximun size of the readers that can read concurrently
#define M 2;
var writing = false;
var noOfReading = 0;

Writer() 	= [noOfReading == 0 && !writing]startwrite{writing = true;} -> stopwrite{writing = false;} -> Writer();
Reader() 	= [noOfReading < M && !writing]startread{noOfReading = noOfReading+1;} -> 
                          //the following guard condition is important to avoid infinite state space, because noOfReading can go negtively infinitely
                          ([noOfReading > 0]stopread{noOfReading = noOfReading-1;} -> Reader());

//there are infinite number of Readers and Writers
ReadersWriters() = |||{..} @ (Reader() ||| Writer());

////////////////The Properties//////////////////
#assert ReadersWriters() deadlockfree;
#define exclusive !(writing == true && noOfReading > 0); 
#assert ReadersWriters() |= [] exclusive;
#define someonereading noOfReading > 0;
#assert ReadersWriters() |= []<>someonereading;
#define someonewriting writing == true;
#assert ReadersWriters() |= []<>someonewriting;
