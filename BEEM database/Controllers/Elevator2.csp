/////////////////////////////////////////////////////////////////////////////
//Controllers :  elevator2
//@author Wang Ting
//@date   01/02/2011
//@parameter
//		N :   Number of served floors.
//		CONTROL :   Control algorithm (naive, clever).
//@properties
//		LTL  	If level 1 is requested, it is served eventually.
//		LTL  	If level 1 is requested, it is served as soon as the cab passes the level 1.
//		LTL  	If level 1 is requested, the cab passes the level without serving it at most once.
//		LTL  	If level 0 is requested, the cab passes the level without serving it at most once.
//		LTL  	The cab will remain at level 1 forever from some moment.
//Description:
//       Motivated by elevator promela model from the SPIN distribution, but actually implements LEGO elevator model built in the Paradise laboratory.
//       Naive controller chooses the next floor to be served randomly.
//       Clever controller chooses the next floor to be served to be the next requested one in the direction of the last cab movement, if there is no such floor then in direction oposite to the direction of the last cab movement.
////////////////////////////////////////////////////////////////////////////
#define N 4;

var req[N];
var ctl_level;
var cab_level;
var flag;
var direction;

Cabin()=[flag>0]startup->Move();open{req[cab_level]=0;flag=0;}->Cabin();

Move()=[ctl_level<cab_level]movedown{cab_level=cab_level-1;}->Move()
       [][ctl_level>cab_level]moveup{cab_level=cab_level+1;}->Move()
       [][ctl_level==cab_level]Skip;

Environment()=[]x:{0..N-1}@([req[x]==0]read.x{req[x]=1;}->Environment());

CleverController()=SearchClever();done1{flag=1;}->CleverController();

SearchClever()=[flag==0]wait{ctl_level=ctl_level+(2*direction)-1;}->WorkClever();

WorkClever()=([ctl_level<0||ctl_level==N]changedir{direction=1-direction;}->SearchClever())
             [][ctl_level>=0&&ctl_level<N&&req[ctl_level]==1]Skip
             []([ctl_level>=0&&ctl_level<N&&req[ctl_level]==0]keepcheck{ctl_level=ctl_level+(2*direction)-1;}->WorkClever());

CleverElevator2()=Cabin()|||Environment()|||CleverController();

#define r0 (req[0]==1);
#define r1 (req[1]==1);
#define v0 (cab_level==0);
#define v1 (cab_level==1);

#assert CleverElevator2()|=[](r1->(<>(v1&&open)));
#assert CleverElevator2()|=[](r1->(!v1 U(v1 U(v1&&open))));
#assert CleverElevator2()|=[](r1->(!v1 U(v1 U(!v1 U(v1 U(v1&&open))))));
#assert CleverElevator2()|=[](r0->(!v0 U(v0 U(!v0 U(v0 U(v0&&open))))));
#assert CleverElevator2()|=<>([]v1);

#assert CleverElevator2() deadlockfree;

#define InfeasibleGoal (false);
#assert CleverElevator2() reaches InfeasibleGoal;
