Элеватор пока нет

/////////////////////////////////////////////////////////////////////////////
//Controller :  Elevator
//@author Chen Manman
//@date   17/1/2011
//@parameter
//		  Floors   :    Number of floors
//       Persons  :	  Number of users
//       Strategy :    Strategy used by the controller (0,1)
//@properties
//		reachability    Person0 and Person1 are in the elevator concurrently.
//       LTL             If a person is waiting, he/she will be served eventually.
//       LTL             If a person is in elevator, he/she will get out eventually.
//Description:
//  Elevator controller,Just some variation on the popular elevator theme 
//Source :  Own model
////////////////////////////////////////////////////////////////////////////
#define Floors 5;
#define Persons 2;
#define Strategy 1;
channel call_0 0;
channel get_in_0 0;
channel get_out_0 0;
channel call_1 0;
channel get_in_1 0;
channel get_out_1 0;
var floor_queue_0[2];
var floor_queue_0_act=0;
var floor_queue_1[2];
var floor_queue_1_act=0;
var floor_queue_2[2];
var floor_queue_2_act=0;
var floor_queue_3[2];
var floor_queue_3_act=0;
var floor_queue_4[2];
var floor_queue_4_act=0;
var current =0;
hvar person_0_flag=0;
hvar person_1_flag=0;
//Process: Person_0
Person_0_Out(at_floor)=call_0!at_floor->Person_0_Waiting(at_floor);
Person_0_Waiting(at_floor)=[0 != at_floor]get_in_0!0{person_0_flag=1;}->Person_0_In_elevator()
                            [][1 != at_floor]get_in_0!1{person_0_flag=1;}->Person_0_In_elevator()
                            [][2 != at_floor]get_in_0!2{person_0_flag=1;}->Person_0_In_elevator()
                            [][3 != at_floor]get_in_0!3{person_0_flag=1;}->Person_0_In_elevator()
                            [][4 != at_floor]get_in_0!4{person_0_flag=1;}->Person_0_In_elevator();
Person_0_In_elevator()=get_out_0?at_floor{person_0_flag=0;}->Person_0_Out(at_floor);

//Process: Person_1
Person_1_Out(at_floor)=call_1!at_floor->Person_1_Waiting(at_floor);
Person_1_Waiting(at_floor)=[0 != at_floor]get_in_1!0{person_1_flag=1;}->Person_1_In_elevator()
                            [][1 != at_floor]get_in_1!1{person_1_flag=1;}->Person_1_In_elevator()
                            [][2 != at_floor]get_in_1!2{person_1_flag=1;}->Person_1_In_elevator()
                            [][3 != at_floor]get_in_1!3{person_1_flag=1;}->Person_1_In_elevator()
                            [][4 != at_floor]get_in_1!4{person_1_flag=1;}->Person_1_In_elevator();
Person_1_In_elevator()=get_out_1?at_floor{person_1_flag=0;}->Person_1_Out(at_floor);

//Process: Servis
Servis(caller)=call_0?floor->R(floor,0)
      []call_1?floor->R(floor,1);

R(floor,caller)=[0 == floor]{floor_queue_0[floor_queue_0_act] = caller; floor_queue_0_act = floor_queue_0_act +1;}->Servis(caller)
       [][1 == floor]{floor_queue_1[floor_queue_1_act] = caller; floor_queue_1_act = floor_queue_1_act +1;}->Servis(caller)
       [][2 == floor]{floor_queue_2[floor_queue_2_act] = caller; floor_queue_2_act = floor_queue_2_act +1;}->Servis(caller)
       [][3 == floor]{floor_queue_3[floor_queue_3_act] = caller; floor_queue_3_act = floor_queue_3_act +1;}->Servis(caller)
       [][4 == floor]{floor_queue_4[floor_queue_4_act] = caller; floor_queue_4_act = floor_queue_4_act +1;}->Servis(caller);

//Process:Elevator
Choose_Next(going_to,serving,who)=[0==serving && floor_queue_0_act==0 && (! (floor_queue_0_act==0)||  ! (floor_queue_1_act==0)||  ! (floor_queue_2_act==0)||  ! (floor_queue_3_act==0)||  ! (floor_queue_4_act==0))]chooseNext0->Choose_Next(going_to,(serving +1) % 5, who)
     [][1==serving && floor_queue_1_act==0 && (! (floor_queue_0_act==0)||  ! (floor_queue_1_act==0)||  ! (floor_queue_2_act==0)||  ! (floor_queue_3_act==0)||  ! (floor_queue_4_act==0))]chooseNext1->Choose_Next(going_to,(serving +1) % 5, who)
     [][2==serving && floor_queue_2_act==0 && (! (floor_queue_0_act==0)||  ! (floor_queue_1_act==0)||  ! (floor_queue_2_act==0)||  ! (floor_queue_3_act==0)||  ! (floor_queue_4_act==0))]chooseNext2->Choose_Next(going_to,(serving +1) % 5, who)
     [][3==serving && floor_queue_3_act==0 && (! (floor_queue_0_act==0)||  ! (floor_queue_1_act==0)||  ! (floor_queue_2_act==0)||  ! (floor_queue_3_act==0)||  ! (floor_queue_4_act==0))]chooseNext3->Choose_Next(going_to,(serving +1) % 5, who)
     [][4==serving && floor_queue_4_act==0 && (! (floor_queue_0_act==0)||  ! (floor_queue_1_act==0)||  ! (floor_queue_2_act==0)||  ! (floor_queue_3_act==0)||  ! (floor_queue_4_act==0))]chooseNext4->Choose_Next(going_to,(serving +1) % 5, who)
     [][0 == serving && (floor_queue_0_act != 0)]moveNext0->Move_Next(going_to,serving,who)
     [][1 == serving && (floor_queue_1_act != 0)]moveNext1->Move_Next(going_to,serving,who)
     [][2 == serving && (floor_queue_2_act != 0)]moveNext2->Move_Next(going_to,serving,who)
     [][3 == serving && (floor_queue_3_act != 0)]moveNext3->Move_Next(going_to,serving,who)
     [][4 == serving && (floor_queue_4_act != 0)]moveNext4->Move_Next(going_to,serving,who);

var temp=0;
Move_Next(going_to,serving,who)=[serving < current]{current = current - 1;}->Move_Next(going_to,serving,who)
          [][serving > current]{current = current + 1;}->Move_Next(going_to,serving,who)
          [][serving == current && 0 == current]{temp=floor_queue_0[0];floor_queue_0[0] = floor_queue_0[1];floor_queue_0[1] = 0;floor_queue_0_act = floor_queue_0_act-1;}->Elevator_Q(going_to,serving,temp) 
          [][serving == current && 1 == current]{temp=floor_queue_1[0];floor_queue_1[0] = floor_queue_1[1];floor_queue_1[1] = 0;floor_queue_1_act = floor_queue_1_act-1;}->Elevator_Q(going_to,serving,temp) 
          [][serving == current && 2 == current]{temp=floor_queue_2[0];floor_queue_2[0] = floor_queue_2[1];floor_queue_2[1] = 0;floor_queue_2_act = floor_queue_2_act-1;}->Elevator_Q(going_to,serving,temp) 
          [][serving == current && 3 == current]{temp=floor_queue_3[0];floor_queue_3[0] = floor_queue_3[1];floor_queue_3[1] = 0;floor_queue_3_act = floor_queue_3_act-1;}->Elevator_Q(going_to,serving,temp) 
          [][serving == current && 4 == current]{temp=floor_queue_4[0];floor_queue_4[0] = floor_queue_4[1];floor_queue_4[1] = 0;floor_queue_4_act = floor_queue_4_act-1;}->Elevator_Q(going_to,serving,temp);

Elevator_Q(going_to,serving,who)=[0==who]get_in_0?go_to->Transporting(go_to,serving,who)
             [][1==who]get_in_1?go_to->Transporting(go_to,serving,who);

Transporting(going_to,serving,who)=[ 0 == who &&  going_to == current]get_out_0!current->Choose_Next(0,current,0)
                           [][ 1 == who &&  going_to == current]get_out_1!current->Choose_Next(0,current,0)
                           [][ going_to < current]{current = current - 1;}->Transporting(going_to,serving,who)
                           [][ going_to > current]{current = current + 1;}->Transporting(going_to,serving,who);

Elevator()=Person_0_Out(0)|||Person_1_Out(0)|||Choose_Next(0,0,0)|||Servis(0);
/**********properties**************************/
//Person0 and Person1 are in the elevator concurrently
#define goal (person_0_flag==1&&person_1_flag==1);
#assert Elevator() reaches goal;
//If a person is waiting, he/she will be served eventually.
#assert Elevator() |=[](call_0.0 -> <> (get_in_0!1||get_in_0!2||get_in_0!3||get_in_0!4))
          &&[](call_0.1 -> <> (get_in_0!0||get_in_0!2||get_in_0!3||get_in_0!4))
          &&[](call_0.2 -> <> (get_in_0!0||get_in_0!1||get_in_0!3||get_in_0!4))
          &&[](call_0.3 -> <> (get_in_0!0||get_in_0!1||get_in_0!2||get_in_0!4))
          &&[](call_0.4 -> <> (get_in_0!0||get_in_0!1||get_in_0!2||get_in_0!3));
//If a person is in elevator, he/she will get out eventually.
#assert Elevator() |=[](get_in_0.0 -> <> (get_out_0?0||get_out_0?1||get_out_0?2||get_out_0?3||get_out_0?4))
          &&[](get_in_0.1 -> <> (get_out_0?0||get_out_0?1||get_out_0?2||get_out_0?3||get_out_0?4))
          &&[](get_in_0.2 -> <> (get_out_0?0||get_out_0?1||get_out_0?2||get_out_0?3||get_out_0?4))
          &&[](get_in_0.3 -> <> (get_out_0?0||get_out_0?1||get_out_0?2||get_out_0?3||get_out_0?4))
          &&[](get_in_0.4 -> <> (get_out_0?0||get_out_0?1||get_out_0?2||get_out_0?3||get_out_0?4));
#assert Elevator() deadlockfree;
#define Infe(false);
#assert Elevator() reaches Infe;
