/////////////////////////////////////////////////////////////////////////////
//Controllers :  lifts
//@author Chen Manman
//@date   18/1/2011
//@parameter
//		N   	:             Number of lifts.
//		ENV   	:             Environment (0= just three commands (init, up, down); 1= init command followed by arbitrary up/down commands, 2=arbitrary commands)
//@properties
//		reachability  	The system can get into an error state.
//       LTL  	Button pressed infinitely often implies moving up infinitely often... satisfied only for ENV=0.
//       LTL  	response property... not satisfied; nice counterexample for ENV=0 (for others there is a trivial cycle)
//       LTL  	precedence property
//Description:
//  The system consists of an arbitrary number of lifts. Each lift supports one wheel of a vehicle.
//  The system is operated by means of buttons on the lifts. Lifts are connected by a bus. The model describes the startup phase and the up/down synchronization mechanism.
//Source : Analysis of a distributed system for lifting trucks; J.F. Groote; J. Pang; A.G. Wouters; 2001, SEN-R0111, ISSN 1386-369X http://db.cwi.nl/rapporten/abstract.php?abstractnr=1069
////////////////////////////////////////////////////////////////////////////
#define TR 8;
#define N 3;
#define ENV 1;
#define STANDBY 0;
#define DOWN 1;
#define UP 2;
#define SYNC 3;
#define STARTUP 4;
channel to_bus_0 0;
channel from_bus_0 0;
channel setref_0 0;
channel up_0 0;
channel down_0 0;
channel release_0 0;
channel to_bus_1 0;
channel from_bus_1 0;
channel setref_1 0;
channel up_1 0;
channel down_1 0;
channel release_1 0;
channel to_bus_2 0;
channel from_bus_2 0;
channel setref_2 0;
channel up_2 0;
channel down_2 0;
channel release_2 0;
channel move_up 0;
channel move_down 0;
var relay[N];
var atom;
//process: Lift_0
var lift_0_pos=0;
var lift_0_nos=0;
var lift_0_status=0;
var lift_0_count=0;
hvar lift_0_t_m;
Lift_0_wait()=[atom==0]setref_0?0{lift_0_pos = 0; relay[0]=1; lift_0_nos=1;}->Lift_0_q1()
             []from_bus_0?m{lift_0_t_m=m;}->Lift_0_r1(lift_0_t_m);

Lift_0_q1()=[atom==0]to_bus_0!(STARTUP*TR+lift_0_pos)->Lift_0_q2();
Lift_0_q2()=[atom==0]{relay[0]=0;}->Lift_0_q3();
Lift_0_q3()=from_bus_0?m{lift_0_t_m=m;}->Lift_0_q4(lift_0_t_m);
Lift_0_q4(m)=[m/TR==STARTUP]{lift_0_nos=m%TR+1;}->Lift_0_q5(m);
Lift_0_q5(m)=[atom==0]to_bus_0!(STANDBY*TR+lift_0_pos)->Lift_0_passive();

Lift_0_r1(m)=[atom==0 && m/TR== STARTUP]{lift_0_pos= m%TR+1; lift_0_nos= lift_0_pos+1; relay[0]=1;}->Lift_0_r2();
Lift_0_r2()=[atom==0]to_bus_0!(STARTUP*TR+lift_0_pos)->Lift_0_r3();
Lift_0_r3()=from_bus_0?m{lift_0_t_m=m;}->Lift_0_r4(lift_0_t_m);
Lift_0_r4(m)=[m/TR==STARTUP]{lift_0_nos= m%TR+1;}->Lift_0_r3()
                   [][m/TR==STANDBY && lift_0_pos!=1]lift_0->Lift_0_passive()
                   [][atom==0 && m/TR==STANDBY && lift_0_pos==1]to_bus_0!(STANDBY*TR+lift_0_pos)->Lift_0_passive();

Lift_0_passive()=[atom==0]up_0?m{lift_0_status=2;lift_0_count=1;}->Lift_0_active()
                   [][atom==0]down_0?m{lift_0_status=1;lift_0_count=1;}->Lift_0_active()
                   []from_bus_0?m{lift_0_t_m=m;}->Lift_0_msg(lift_0_t_m);

Lift_0_active()=[atom==0]release_0?m{lift_0_status=0;}->Lift_0_passive()
                      []from_bus_0?m{lift_0_t_m=m;}->Lift_0_a_msg(lift_0_t_m);

Lift_0_msg(m)=[(m/8) != 3 && ((m%8)+1)%lift_0_nos != lift_0_pos]{lift_0_status=m/8;}->Lift_0_passive()
                    [][(m/8) != 3 && ((m%8)+1)%lift_0_nos == lift_0_pos]{lift_0_status=m/8;}->Lift_0_p_send()
                    [][(m/8) == 3 && lift_0_status == 2 && ((m%8)+1)%lift_0_nos != lift_0_pos ]move_up!0->Lift_0_passive()
                    [][(m/8) == 3 && lift_0_status == 1 && ((m%8)+1)%lift_0_nos != lift_0_pos ]move_down!0->Lift_0_passive()
                    [][(m/8) == 3 && lift_0_status == 2 && ((m%8)+1)%lift_0_nos == lift_0_pos ]move_up!0->Lift_0_p_send()
                    [][(m/8) == 3 && lift_0_status == 1 && ((m%8)+1)%lift_0_nos == lift_0_pos ]move_down!0->Lift_0_p_send()
                    [][atom==0 && (m/8==3) && lift_0_status == 0 ]lift_0_error->Stop;

Lift_0_p_send()=to_bus_0!(lift_0_status*8+lift_0_pos)->Lift_0_passive();

Lift_0_a_msg(m)=[m/TR== SYNC && lift_0_status==DOWN]move_down!0->Lift_0_active()
                  [][m/TR== SYNC && lift_0_status==UP]move_up!0->Lift_0_active()
                  [][m/TR== lift_0_status && (m%TR+1)%lift_0_nos != lift_0_pos]{lift_0_count=lift_0_count+1;}->Lift_0_active()
                  [][m/TR!= lift_0_status && (m%TR+1)%lift_0_nos != lift_0_pos]lift_0_msg_active->Lift_0_active()
                  [][m/TR== lift_0_status && (m%TR+1)%lift_0_nos == lift_0_pos]{lift_0_count=lift_0_count+1;}->Lift_0_a_send()
                  [][m/TR!= lift_0_status && (m%TR+1)%lift_0_nos == lift_0_pos]lift_0_msg_send->Lift_0_a_send();

Lift_0_a_send()=[lift_0_count==lift_0_nos]to_bus_0!(SYNC*TR+lift_0_pos){lift_0_count=1;}->Lift_0_a_move()
                  [][lift_0_count!=lift_0_nos]to_bus_0!(lift_0_status*TR+lift_0_pos){lift_0_count=1;}->Lift_0_active();

Lift_0_a_move()=[lift_0_status==UP]move_up!0->Lift_0_active()
                  [][lift_0_status==DOWN]move_down!0->Lift_0_active();

//process: Lift_1
var lift_1_pos=0;
var lift_1_nos=0;
var lift_1_status=0;
var lift_1_count=0;
hvar lift_1_t_m;
Lift_1_wait()=[atom==0]setref_1?0{lift_1_pos = 0; relay[1]=1; lift_1_nos=1;}->Lift_1_q1()
             []from_bus_1?m{lift_1_t_m=m;}->Lift_1_r1(lift_1_t_m);

Lift_1_q1()=[atom==0]to_bus_1!(STARTUP*TR+lift_1_pos)->Lift_1_q2();
Lift_1_q2()=[atom==0]{relay[1]=0;}->Lift_1_q3();
Lift_1_q3()=from_bus_1?m{lift_1_t_m=m;}->Lift_1_q4(lift_1_t_m);
Lift_1_q4(m)=[m/TR==STARTUP]{lift_1_nos=m%TR+1;}->Lift_1_q5(m);
Lift_1_q5(m)=[atom==0]to_bus_1!(STANDBY*TR+lift_1_pos)->Lift_1_passive();

Lift_1_r1(m)=[atom==0 && m/TR== STARTUP]{lift_1_pos= m%TR+1; lift_1_nos= lift_1_pos+1; relay[1]=1;}->Lift_1_r2();
Lift_1_r2()=[atom==0]to_bus_1!(STARTUP*TR+lift_1_pos)->Lift_1_r3();
Lift_1_r3()=from_bus_1?m{lift_1_t_m=m;}->Lift_1_r4(lift_1_t_m);
Lift_1_r4(m)=[m/TR==STARTUP]{lift_1_nos= m%TR+1;}->Lift_1_r3()
                   [][m/TR==STANDBY && lift_1_pos!=1]lift_1->Lift_1_passive()
                   [][atom==0 && m/TR==STANDBY && lift_1_pos==1]to_bus_1!(STANDBY*TR+lift_1_pos)->Lift_1_passive();

Lift_1_passive()=[atom==0]up_1?m{lift_1_status=2;lift_1_count=1;}->Lift_1_active()
                   [][atom==0]down_1?m{lift_1_status=1;lift_1_count=1;}->Lift_1_active()
                   []from_bus_1?m{lift_1_t_m=m;}->Lift_1_msg(lift_1_t_m);

Lift_1_active()=[atom==0]release_1?m{lift_1_status=0;}->Lift_1_passive()
                      []from_bus_1?m{lift_1_t_m=m;}->Lift_1_a_msg(lift_1_t_m);

Lift_1_msg(m)=[(m/8) != 3 && ((m%8)+1)%lift_1_nos != lift_1_pos]{lift_1_status=m/8;}->Lift_1_passive()
                    [][(m/8) != 3 && ((m%8)+1)%lift_1_nos == lift_1_pos]{lift_1_status=m/8;}->Lift_1_p_send()
                    [][(m/8) == 3 && lift_1_status == 2 && ((m%8)+1)%lift_1_nos != lift_1_pos ]move_up!0->Lift_1_passive()
                    [][(m/8) == 3 && lift_1_status == 1 && ((m%8)+1)%lift_1_nos != lift_1_pos ]move_down!0->Lift_1_passive()
                    [][(m/8) == 3 && lift_1_status == 2 && ((m%8)+1)%lift_1_nos == lift_1_pos ]move_up!0->Lift_1_p_send()
                    [][(m/8) == 3 && lift_1_status == 1 && ((m%8)+1)%lift_1_nos == lift_1_pos ]move_down!0->Lift_1_p_send()
                    [][atom==0 && (m/8==3) && lift_1_status == 0 ]lift_1_error->Stop;

Lift_1_p_send()=to_bus_1!(lift_1_status*8+lift_1_pos)->Lift_1_passive();

Lift_1_a_msg(m)=[m/TR== SYNC && lift_1_status==DOWN]move_down!0->Lift_1_active()
                  [][m/TR== SYNC && lift_1_status==UP]move_up!0->Lift_1_active()
                  [][m/TR== lift_1_status && (m%TR+1)%lift_1_nos != lift_1_pos]{lift_1_count=lift_1_count+1;}->Lift_1_active()
                  [][m/TR!= lift_1_status && (m%TR+1)%lift_1_nos != lift_1_pos]lift_1_msg_active->Lift_1_active()
                  [][m/TR== lift_1_status && (m%TR+1)%lift_1_nos == lift_1_pos]{lift_1_count=lift_1_count+1;}->Lift_1_a_send()
                  [][m/TR!= lift_1_status && (m%TR+1)%lift_1_nos == lift_1_pos]lift_1_msg_send->Lift_1_a_send();

Lift_1_a_send()=[lift_1_count==lift_1_nos]to_bus_1!(SYNC*TR+lift_1_pos){lift_1_count=1;}->Lift_1_a_move()
                  [][lift_1_count!=lift_1_nos]to_bus_1!(lift_1_status*TR+lift_1_pos){lift_1_count=1;}->Lift_1_active();

Lift_1_a_move()=[lift_1_status==UP]move_up!0->Lift_1_active()
                  [][lift_0_status==DOWN]move_down!0->Lift_1_active();

//process: Lift_2
var lift_2_pos=0;
var lift_2_nos=0;
var lift_2_status=0;
var lift_2_count=0;
hvar lift_2_t_m;
Lift_2_wait()=[atom==0]setref_2?0{lift_2_pos = 0; relay[2]=1; lift_2_nos=1;}->Lift_2_q1()
             []from_bus_2?m{lift_2_t_m=m;}->Lift_2_r1(lift_2_t_m);

Lift_2_q1()=[atom==0]to_bus_2!(STARTUP*TR+lift_2_pos)->Lift_2_q2();
Lift_2_q2()=[atom==0]{relay[2]=0;}->Lift_2_q3();
Lift_2_q3()=from_bus_2?m{lift_2_t_m=m;}->Lift_2_q4(lift_2_t_m);
Lift_2_q4(m)=[m/TR==STARTUP]{lift_2_nos=m%TR+1;}->Lift_2_q5(m);
Lift_2_q5(m)=[atom==0]to_bus_2!(STANDBY*TR+lift_2_pos)->Lift_2_passive();

Lift_2_r1(m)=[atom==0 && m/TR== STARTUP]{lift_2_pos= m%TR+1; lift_2_nos= lift_2_pos+1; relay[2]=1;}->Lift_2_r2();
Lift_2_r2()=[atom==0]to_bus_2!(STARTUP*TR+lift_2_pos)->Lift_2_r3();
Lift_2_r3()=from_bus_2?m{lift_2_t_m=m;}->Lift_2_r4(lift_2_t_m);
Lift_2_r4(m)=[m/TR==STARTUP]{lift_2_nos= m%TR+1;}->Lift_2_r3()
                   [][m/TR==STANDBY && lift_2_pos!=1]lift_2->Lift_2_passive()
                   [][atom==0 && m/TR==STANDBY && lift_2_pos==1]to_bus_2!(STANDBY*TR+lift_2_pos)->Lift_2_passive();

Lift_2_passive()=[atom==0]up_2?m{lift_2_status=2;lift_2_count=1;}->Lift_2_active()
                   [][atom==0]down_2?m{lift_2_status=1;lift_2_count=1;}->Lift_2_active()
                   []from_bus_2?m{lift_2_t_m=m;}->Lift_2_msg(lift_2_t_m);

Lift_2_active()=[atom==0]release_2?m{lift_2_status=0;}->Lift_2_passive()
                      []from_bus_2?m{lift_2_t_m=m;}->Lift_2_a_msg(lift_2_t_m);

Lift_2_msg(m)=[(m/8) != 3 && ((m%8)+1)%lift_2_nos != lift_2_pos]{lift_2_status=m/8;}->Lift_2_passive()
                    [][(m/8) != 3 && ((m%8)+1)%lift_2_nos == lift_2_pos]{lift_2_status=m/8;}->Lift_2_p_send()
                    [][(m/8) == 3 && lift_2_status == 2 && ((m%8)+1)%lift_2_nos != lift_2_pos ]move_up!0->Lift_2_passive()
                    [][(m/8) == 3 && lift_2_status == 1 && ((m%8)+1)%lift_2_nos != lift_2_pos ]move_down!0->Lift_2_passive()
                    [][(m/8) == 3 && lift_2_status == 2 && ((m%8)+1)%lift_2_nos == lift_2_pos ]move_up!0->Lift_2_p_send()
                    [][(m/8) == 3 && lift_2_status == 1 && ((m%8)+1)%lift_2_nos == lift_2_pos ]move_down!0->Lift_2_p_send()
                    [][atom==0 && (m/8==3) && lift_2_status == 0 ]lift_2_error->Stop;

Lift_2_p_send()=to_bus_2!(lift_2_status*8+lift_2_pos)->Lift_2_passive();

Lift_2_a_msg(m)=[m/TR== SYNC && lift_2_status==DOWN]move_down!0->Lift_2_active()
                  [][m/TR== SYNC && lift_2_status==UP]move_up!0->Lift_2_active()
                  [][m/TR== lift_2_status && (m%TR+1)%lift_2_nos != lift_2_pos]{lift_2_count=lift_2_count+1;}->Lift_2_active()
                  [][m/TR!= lift_2_status && (m%TR+1)%lift_2_nos != lift_2_pos]lift_2_msg_active->Lift_2_active()
                  [][m/TR== lift_2_status && (m%TR+1)%lift_2_nos == lift_2_pos]{lift_2_count=lift_2_count+1;}->Lift_2_a_send()
                  [][m/TR!= lift_2_status && (m%TR+1)%lift_2_nos == lift_2_pos]lift_2_msg_send->Lift_2_a_send();

Lift_2_a_send()=[lift_2_count==lift_2_nos]to_bus_2!(SYNC*TR+lift_2_pos){lift_2_count=1;}->Lift_2_a_move()
                  [][lift_2_count!=lift_2_nos]to_bus_2!(lift_2_status*TR+lift_2_pos){lift_2_count=1;}->Lift_2_active();

Lift_2_a_move()=[lift_2_status==UP]move_up!0->Lift_2_active()
                  [][lift_0_status==DOWN]move_down!0->Lift_2_active();

//Process: Bus
hvar t_m=0;
Wait(sender,j)= to_bus_0?m{atom=1;t_m=m;}->Send_up(0,(0+1)%N,t_m)
         []to_bus_1?m{atom=1;t_m=m;}->Send_up(1,(1+1)%N,t_m)
         []to_bus_2?m{atom=1;t_m=m;}->Send_up(2,(2+1)%N,t_m);

Send_up(sender,j,m)=[j==0 && j!=sender && relay[(j+N-1)%N]==1]from_bus_0!m->Send_up(sender,(j+1)%N,m)
            [][j==1 && j!=sender && relay[(j+N-1)%N]==1]from_bus_1!m->Send_up(sender,(j+1)%N,m)
            [][j==2 && j!=sender && relay[(j+N-1)%N]==1]from_bus_2!m->Send_up(sender,(j+1)%N,m)
            [][j==sender]{atom=0;}->Wait(sender,j)
            [][j!=sender && relay[(j+N-1)%N]==0]send_down->Send_down(sender,(sender+N-1)%N,m);

Send_down(sender,j,m)=[j==0 && j!= sender && relay[j]==1]from_bus_0!m->Send_down(sender,(j+N-1)%N,m)
              [][j==1 && j!= sender && relay[j]==1]from_bus_1!m->Send_down(sender,(j+N-1)%N,m)
              [][j==2 && j!= sender && relay[j]==1]from_bus_2!m->Send_down(sender,(j+N-1)%N,m)
              [][j==sender || relay[j]==0]{atom=0;}->Wait(sender,j);

//Process: Environment
Environment()=setref_0!0->Q()
    []setref_1!0->Q()
    []setref_2!0->Q();

Q()=up_0!0->pressed_up_0->Pressed_up_0()
    []down_0!0->Pressed_down_0()
   []up_1!0->Pressed_up_1()
    []down_1!0->Pressed_down_1()
   []up_2!0->Pressed_up_2()
    []down_2!0->Pressed_down_2();

Pressed_up_0()=release_0!0->Q();
Pressed_up_1()=release_1!0->Q();
Pressed_up_2()=release_2!0->Q();
Pressed_down_0()=release_0!0->Q();
Pressed_down_1()=release_1!0->Q();
Pressed_down_2()=release_2!0->Q();

//Process: Wheels
hvar error=0;
Staying(count)=move_up?m->moving_up->Moving_up(1)
             []move_down?m->Moving_down(1);

Moving_up(count)=[count < N-1]move_up?m->Moving_up(count+1)
               [][count == N-1]move_up?m->Staying(count)
               []move_down?m{error=1;}->Stop;

Moving_down(count)=[count< N-1]move_down?m->Moving_down(count+1)
                 [][count==N-1]move_down?m->Staying(count)
                 []move_up?m{error=1;}->Stop;

Lifts()=Lift_0_wait()|||Lift_1_wait()|||Lift_2_wait()|||Wait(0,0)|||Environment()|||Staying(0);
#define goal (error==1);
#assert Lifts() reaches goal;//The system can get into an error state.

#assert Lifts() |= ([]<> pressed_up_0) -> ([]<> moving_up);//Button pressed infinitely often implies moving up infinitely often... satisfied only for ENV=0.

#assert Lifts() |= [] (pressed_up_0 -> <> moving_up);//response property... not satisfied; nice counterexample for ENV=0 (for others there is a trivial cycle).

#assert Lifts() |= ((! moving_up) U pressed_up_0) || [] (! moving_up);//precedence property.

#assert Lifts() deadlockfree;
#define infe(false);
#assert Lifts() reaches infe;
